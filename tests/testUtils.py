'''
This utility class reads in and stores the Matlab saved results as well as
the mappings between pyradiomics feature names and Matlab feature names
(generated by namesMatcher.py), as well as the manually generated
matlab2pyradiomics_<feature_class>.txt file.
It provides utility methods to get the baseline Matlab feature value for a
feature class.
'''

import sys, os
import csv

class RadiomicsTestUtils:

  def __init__(self, featureClassName):
    print 'RadiomicsTestUtils for ',featureClassName

    self.dataDir = os.path.join(os.path.dirname(os.path.abspath(__file__)),"..","data")
    self.mappingDir = os.path.join(self.dataDir,'mapping')

    self.matlabFeaturesFile = os.path.join(self.dataDir,'MatlabFeatures.csv')
    self.matlab2PyradiomicsFile = os.path.join(self.mappingDir,'matlab2pyradiomics_'+featureClassName+'.txt')
    self.matlabIndicesFile = os.path.join(self.mappingDir,'matlab_'+featureClassName+'.txt')
    self.pyradiomicsIndicesFile = os.path.join(self.mappingDir,'pyradiomics_'+featureClassName+'.txt')

    self.featureClass = featureClassName
    self.baselineFeatures = {}
    self.matlab2PyradiomicsIndices = {}
    self.pyradiomics2MatlabIndices = {}
    self.matlabIndices = {}
    self.pyradiomicsIndices = {}

    self.patientID = None

    self.readMatlabFeatures()
    self.readMatlabIndices()
    self.readRadiomicsIndices()
    self.readMatlab2Pyradiomics()

  def setPatientID(self, patientID):
    self.patientID = patientID
  def getPatientID(self):
    return self.patientID

  #
  # Read in the matlab features file and store the baseline information
  # for the patients.
  #
  def readMatlabFeatures(self):
    if (not os.path.exists(self.matlabFeaturesFile)):
      print 'Matlab features file not found:',self.matlabFeaturesFile
      return
    self.baselineFeatures = {}
    csvFile = open(self.matlabFeaturesFile, 'rb')
    csvFileReader = csv.reader(csvFile)
    # get the column headers
    headerRow = csvFileReader.next()
    # iterate over the patient in the file
    for patientRow in csvFileReader:
      patientID = patientRow[0]
      self.baselineFeatures[patientID] = {}
      print 'Reading baseline for patient',patientID
      columnIndex = 0
      for val in patientRow:
        self.baselineFeatures[patientID][headerRow[columnIndex]] = val
        columnIndex += 1


  #
  # Read in the file that maps matlab feature indices to matlab feature names
  #
  def readMatlabIndices(self):
    if (not os.path.exists(self.matlabIndicesFile)):
      print 'Matlab indices to feature names file not found:',self.matlabIndicesFile
      return
    self.matlabIndices = {}
    mappingFile = open(self.matlabIndicesFile, 'rb')
    for line in mappingFile:
      indexFeature = line.rstrip().split(':')
      index = int(indexFeature[0])
      feature = indexFeature[1]
      self.matlabIndices[index] = feature
    print 'matlabIndices = ',self.matlabIndices

  #
  # Read in the file that maps radiomics feature indices to radiomics feature names
  #
  def readRadiomicsIndices(self):
    if (not os.path.exists(self.pyradiomicsIndicesFile)):
      print 'Radiomics indices to feature names file not found:',self.pyradiomicsIndicesFile
      return
    self.pyradiomicsIndices = {}
    mappingFile = open(self.pyradiomicsIndicesFile, 'rb')
    for line in mappingFile:
      indexFeature = line.rstrip().split(':')
      index = int(indexFeature[0])
      feature = indexFeature[1]
      self.pyradiomicsIndices[feature] = index
    print 'pyradiomicsIndices = ',self.pyradiomicsIndices

  #
  # Read and parse the file that gives the mapping between matlab feature
  # incides and pyradiomics feature indices
  #
  def readMatlab2Pyradiomics(self):
    if (not os.path.exists(self.matlab2PyradiomicsFile)):
      print 'Matlab to pyradiomics feature indices mapping file not found:',self.matlab2PyradiomicsFile
      return
    self.matlab2PyradiomicsIndices = {}
    self.pyradiomics2MatlabIndices = {}
    mappingFile = open(self.matlab2PyradiomicsFile, 'rb')
    for line in mappingFile:
       m2pyrad = line.rstrip().split(':')
       matlabIndex = int(m2pyrad[0])
       pyradIndex = int(m2pyrad[1])
       self.pyradiomics2MatlabIndices[pyradIndex] = matlabIndex
       self.matlab2PyradiomicsIndices[matlabIndex] = pyradIndex
    print 'pyradiomcs 2 matlab indices = ',self.pyradiomics2MatlabIndices
    print 'matlab 2 pyradiomics indices =',self.matlab2PyradiomicsIndices

  #
  # Search the pyradiomicsIndices for the passed in pyradiomicsKey
  # and return the index. Returns -1 if not found
  #
  def getPyradiomicsIndex(self, pyradiomicsKey):
    pyradiomicsIndex = -1
    if pyradiomicsKey in self.pyradiomicsIndices:
      print 'key is in the indices list: ',pyradiomicsKey
      pyradiomicsIndex = self.pyradiomicsIndices[pyradiomicsKey]
    return pyradiomicsIndex

  #
  # Get the matching matlab index for the given pyradiomics index.
  # Returns -1 if not found.
  #
  def getMatlabIndexFromPyradIndex(self, pyradIndex):
    matlabIndex = -1
    if pyradIndex in self.pyradiomics2MatlabIndices:
        matlabIndex = self.pyradiomics2MatlabIndices[pyradIndex]
    return matlabIndex

  #
  # Find the feature name for the matlab feature with matlabIndex.
  # Returns None on failure.
  #
  def getMatlabFeatureName(self, matlabIndex):
    featureName = None
    if matlabIndex in self.matlabIndices:
      featureName = self.matlabIndices[matlabIndex]
    return featureName

  #
  # From the given matlabFeatureName, check that the currently set
  # patientID has an entry in the baseline features dictionary. If so,
  # return the value of the feature named.
  #
  def getBaselineFeature(self, matlabFeatureName):
    assert(self.getPatientID() in self.baselineFeatures)
    print('Patient %s has baseline information' % self.getPatientID())
    featureName = self.featureClass + '_' + matlabFeatureName
    assert(featureName in self.baselineFeatures[self.getPatientID()])
    print('Matlab feature %s is in the baseline for this patient' % featureName)
    return float(self.baselineFeatures[self.getPatientID()][featureName])

  #
  # From the given pyradiomics key, find the matching matlab key
  # and return the baseline feature value for the currently set patient
  # ID.
  #
  def getMatlabValue(self, pyradiomicsKey):
    print('getMatlabValue: pyrad key = %s' % (pyradiomicsKey))

    # get the index of this pyradoimics feature name
    pyradIndex = self.getPyradiomicsIndex(pyradiomicsKey)
    print('getMatlabValue: got pyradindex %d' % pyradIndex)
    assert(pyradIndex != -1)

    # now map that index to a matlab index
    matlabIndex = self.getMatlabIndexFromPyradIndex(pyradIndex)
    print('getMatlabValue: got matlab index %d' % matlabIndex)
    assert(matlabIndex != 1)

    # now get the matlab feature name for that index
    matlabFeatureName = self.getMatlabFeatureName(matlabIndex)
    print('getMatlabValue: got matlab feature name %s' % matlabFeatureName)
    assert(matlabFeatureName != None)

    # now get the baseline for this feature for this patient
    return self.getBaselineFeature(matlabFeatureName)

# testUtils = RadiomicsTestUtils('glcm')
